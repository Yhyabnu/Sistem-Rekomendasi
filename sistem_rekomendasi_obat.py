# -*- coding: utf-8 -*-
"""sistem_rekomendasi_obat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16vgvYs2JRQ-l0RGoB2JGk55jsUS2jvJZ

# **Import Library yang digunakan**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics import calinski_harabasz_score, davies_bouldin_score
import warnings
warnings.filterwarnings('ignore')

"""# **Data Understanding**"""

obat = pd.read_csv('obat.csv', on_bad_lines='skip')

"""membaca 10 kolom pertama dalam data"""

obat.head(10)

"""menampilkan informasi data obat, merujuk pada jumlah data dan type data yang diguakan"""

obat.info()

"""---
**obat.describe** digunakan untuk menampilkan statistik deskriptif dari sebuah dataset berupa distribusi data numerik, termasuk ukuran pemusatan, dispersi, dan bentuk distribusi
"""

obat.describe().apply(lambda s: s.apply('{0:.2f}'.format))

"""Dataset obat memiliki rating terendah 1 dan rating tertinggi 10 dengan rata-rata 6.96. Dataset ini juga memiliki jumlah kegunaan terendah 0 dan terbanyak 949 dengan rata-rata 28.38.


---

obat.shape digunakan untuk menampilan hasil berupa banyaknya jumlah baris data dan kolom yang ada dalam dataset obat.csv
"""

obat.shape

print('Jumlah UniqueID Obat: ', len(obat.uniqueID.unique()))
print('Jumlah Nama obat: ', len(obat.drugName.unique()))
print('Jumlah Kondisi: ', len(obat.condition.unique()))
print('Jumlah Review Obat: ', len(obat.review.unique()))
print('Jumlah Rating Obat: ', len(obat.rating.unique()))
print('Jumlah Kegunaan obat: ', len(obat.usefulCount.unique()))

print('Jenis Obat: ', (obat.drugName.unique()))

print('kondisi: ', (obat.condition.unique()))

print('Rating: ', (obat.rating.unique()))

print('Obat UsefulCount:',(obat.usefulCount.unique()))

"""### Menampilakan Visualisasi dari Distribusi rata-rata berdasarkan Rating Obat"""

# Drugs Average Ratings Distribution
plt.hist(obat.rating, color='pink', edgecolor='black')
plt.ylabel('Total')
plt.xlabel('Avg Rating')
plt.title("Distribusi Rata-rata Rating obat")
plt.show()

"""berdasarkan pada grafik diatas sebagian besar pengguna obat memberikan rating tertinggi (10) dengan jumlah rating 4726. hal tersebut menunjukan kepuasan pengguna terhadap obat yang mereka gunakan

---

obat['condition'].sort_values(ascending=False) digunakan Mengurutkan DataFrame berdasarkan kolom condition dalam urutan menurun (descending) — artinya dari Z ke A (atau kondisi paling akhir secara alfabet ke awal).
"""

obat['condition'].sort_values(ascending=False).head()

"""Membuat Visualisasi untuk jenis obat yang paling sering digunakan dalam berbagai kondisi kesehatan. Kode ini bertujuan untuk menampilkan 10 obat teratas yang paling banyak digunakan untuk berbagai kondisi kesehatan berdasarkan banyaknya kemunculan (jumlah penggunaan) obat tersebut dalam dataset."""

# Hitung jumlah obat berdasarkan condition
top10_obat = (
    obat.groupby('drugName')['condition']
    .count()
    .sort_values(ascending=False)
    .head(10)
    .reset_index(name='count')
)

# Plot
plt.figure(figsize=(12, 8))
colors = ['#87255B', '#56CBF9', '#F5D491', '#BEB7A4', '#B4E1FF', '#F06C9B', '#D3C4D1', '#81F4E1', '#C2AFF0', '#C57B57']
labels = top10_obat['drugName'].values
values = top10_obat['count'].values

bars = plt.barh(labels, values, color=colors, edgecolor='black', height=0.6)

# Tambahkan label jumlah
for bar in bars:
    width = bar.get_width()
    plt.text(width + 1, bar.get_y() + bar.get_height()/2,
             f"{int(width)}", va='center', fontsize=12, fontweight='bold')

plt.gca().invert_yaxis()
plt.grid(axis='x', linestyle='--', alpha=0.6)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12, fontweight='bold')
plt.title("Top 10 Obat Berdasarkan Jumlah Penggunaan untuk Berbagai Kondisi", fontsize=16, fontweight='bold')
plt.xlabel("Jumlah Kondisi (Penggunaan)", fontsize=14)
plt.tight_layout()
plt.show()

"""

---


obat['rating'].sort_values(ascending=False) digunakan Mengurutkan DataFrame berdasarkan kolom rating dalam urutan menurun (descending).
"""

# mengurutkan data rating dari tertinggi ke terendah
obat['rating'].sort_values(ascending=False).head()

"""Membuat Visualisasi untuk jenis obat yang paling sering digunakan dengan berdasarkan pada rating yang diberikan. Kode ini bertujuan untuk menampilkan 10 obat teratas yang paling banyak digunakan untuk berbagai kondisi kesehatan berdasarkan banyaknya kemunculan (jumlah penggunaan) obat tersebut dalam dataset."""

# Ambil 10 obat dengan rating tertinggi
top10_obat = obat[['drugName', 'rating']].sort_values(by='rating', ascending=False).head(10)

colors = ['#87255B', '#56CBF9', '#F5D491', '#BEB7A4', '#B4E1FF',
          '#F06C9B', '#D3C4D1', '#81F4E1', '#C2AFF0', '#C57B57']

labels = top10_obat['drugName'].values
values = top10_obat['rating'].values

plt.figure(figsize=(18, 10))
bars = plt.bar(labels, values, color=colors, edgecolor='black', width=0.6)

# Tambahkan nilai rating di atas setiap batang
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 0.05,
             f"{height:.2f}", ha='center', va='bottom', fontsize=12, fontweight='bold')

# Tata letak & tampilan
plt.ylabel("Rata-rata Rating", fontsize=14)
plt.xlabel("Nama Obat", fontsize=14)
plt.title("Top 10 Obat Berdasarkan Rata-rata Rating", fontsize=20, fontweight='bold')
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.yticks(np.arange(0, 10.5, 0.5), fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""obat['usefulCount'].sort_values(ascending=False) digunakan Mengurutkan DataFrame berdasarkan kolom condition dalam urutan menurun (descending) — artinya dari Z ke A (atau kondisi paling akhir secara alfabet ke awal) atau dari yang terbesar ke terkecil.


"""

#mengurutkan data usefulCount dari terbesar ke kecil
obat['usefulCount'].sort_values(ascending=False).head()

"""Membuat Visualisasi untuk jenis obat yang paling sering digunakan berdasarkan pada kegunaan. Kode ini bertujuan untuk menampilkan 10 obat teratas yang paling banyak digunakan untuk berbagai umlah kegunaan berdasarkan banyaknya kemunculan (jumlah penggunaan) obat tersebut dalam dataset."""

# Ambil 10 obat dengan usefulCount tertinggi
top10_obat = obat[['drugName', 'usefulCount']].sort_values(by='usefulCount', ascending=False).head(10)

# Data untuk plotting
colors = ['#87255B', '#56CBF9', '#F5D491', '#BEB7A4', '#B4E1FF',
          '#F06C9B', '#D3C4D1', '#81F4E1', '#C2AFF0', '#C57B57']

labels = top10_obat['drugName'].values
values = top10_obat['usefulCount'].values

# Plot
plt.figure(figsize=(18, 10))
bars = plt.bar(labels, values, color=colors, edgecolor='black', width=0.6)

# Tambahkan nilai di atas setiap batang
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, height + 5,
             f"{int(height):,}", ha='center', va='bottom', fontsize=12, fontweight='bold')

# Tata letak & tampilan
plt.ylabel("Jumlah Pengguna yang Menganggap Review Berguna", fontsize=14)
plt.xlabel("Nama Obat", fontsize=14)
plt.title("Top 10 Obat Berdasarkan Useful Count", fontsize=20, fontweight='bold')
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""# **Data Preparation**

**obat.isnull().sum** merupakan langkah untuk melihat apakah dalam data tersebut memiliki nilai kosong atau Null
"""

obat.isnull().sum()

"""setelah melakaukan pengecekan nilai kosong atau null pada dataset tersebut ditemukan 81 nilai kosong pada kolom condition. dikarenakan jumlah data yang relatif besar maka menghapus data tersebut tentu saja tidak akan berpengaruh secara signifikat terhadap proses selanjutnya.


"""

obat = obat.dropna()

obat.isnull().sum()

"""selelah melakukan pengapusan missing data pada kolom condition maka jumlah data yang awalnya 15.000 menjadi 14.919

---

langkah selanjuntya yaitu melakukan pengecekan duplicate data dengan menggunakan fungsi duplicated, dengan hasil tidak ditemukannya data yang duplicat
"""

# Mengecek apakah ada baris duplikat
jumlah_duplikat = obat.duplicated().sum()
print(f"Terdapat {jumlah_duplikat} baris duplikat dari total {obat.shape[0]} baris.")

"""melakukan regresi expresion untuk membersihkan teks ulasan obat (review) dari simbol-simbol HTML, karakter khusus, dan format yang tidak konsisten. Tujuannya adalah agar data teks menjadi lebih rapi dan konsisten sebelum digunakan dalam proses seperti analisis sentimen atau sistem rekomendasi."""

import re

def text_cleaning(text):
    # Pastikan text adalah string
    if not isinstance(text, str):
        return text

    # Daftar pola dan penggantinya
    replacements = [
        (r'"', ''),          # Menghapus tanda kutip ganda
        (r'\.hack//', ''),    # Menghapus .hack// (escape titik)
        (r'&#039;', "'"),     # Mengubah &#039; menjadi apostrof
        (r'A&#039;s', "A's"),  # Memperbaiki A's
        (r'I&#039;', "I'"),    # Memperbaiki I'
        (r'&', 'and'),       # Mengubah & menjadi and
        (r'\\', ''),         # Menghapus backslash
        (r'\s+', ' ')        # Mengganti multiple spasi dengan satu spasi
    ]

    # Terapkan semua replacements
    for pattern, repl in replacements:
        text = re.sub(pattern, repl, text)

    return text.strip()  # Hilangkan spasi di awal/akhir

# Terapkan fungsi ke kolom review
obat['review'] = obat['review'].apply(text_cleaning)

"""## Melakukan groupby pada kolom drugName, Conditon dan rating

groupby digunakan untuk menghitung jumlah entri data untuk setiap nama obat (drugName, condition, rating) dalam DataFrame obat.
"""

obat.groupby('drugName')['drugName'].agg('count')

obat.groupby('condition')['condition'].agg('count')

obat.groupby('rating')['rating'].agg('count')

# Gabungkan kolom drugName, condition, dan review menjadi satu kolom untuk content-based filtering
obat['content'] = obat['drugName'] + ' ' + obat['condition'] + ' ' + obat['review']

"""penggabungan kolom (drugname, condition dan review) bertujuan untuk menghasilkan kolom baru berupa content yang akan dijadikan sebagai dasar analisis kemiripan antar obat"""

# Menggunakan TF-IDF Vectorizer untuk mengonversi teks menjadi fitur numerik
tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(obat['content'])

# Melihat dimensi dari TF-IDF matrix
print(f'Dimensi dari TF-IDF matrix: {tfidf_matrix.shape}')

"""melakukan kompresi pada dimensi TF-IDF supaya pemodelan tidak terlalu berat untuk berjalan hal ini dapat menghidari terjadinya putus runtime pada saat modeling"""

from sklearn.decomposition import TruncatedSVD

# Menggunakan TruncatedSVD untuk mengurangi dimensi TF-IDF matrix
svd = TruncatedSVD(n_components=100, random_state=42)
tfidf_matrix_reduced = svd.fit_transform(tfidf_matrix)

# Melihat dimensi setelah reduksi
print(f'Dimensi setelah reduksi: {tfidf_matrix_reduced.shape}')

"""Todense digunakan untuk mengubah hasil transformasi TF-IDF dari bentuk sparse matrix (matriks jarang) menjadi dense matrix (matriks padat) yang lebih mudah dibaca dan dianalisis."""

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

"""# **Content Based Filtering Model & Result**
Content-Based Filtering adalah metode sistem rekomendasi yang menyarankan item (misalnya obat, film, buku) kepada pengguna berdasarkan kemiripan fitur antara item yang disukai dengan item lainnya.

Cosine similarity bertujuan untuk menghitung tingkat kemiripan antar obat berdasarkan teks review atau deskripsi yang telah diolah menggunakan TF-IDF (Term Frequency-Inverse Document Frequency) dan telah direduksi dimensinya menggunakan teknik seperti SVD (Singular Value Decomposition) atau lainnya.
"""

# Menghitung cosine similarity antara obat berdasarkan TF-IDF matrix yang telah direduksi
cosine_sim = cosine_similarity(tfidf_matrix_reduced, tfidf_matrix_reduced)

# Menampilkan sebagian dari cosine similarity matrix untuk melihat hasilnya
print(cosine_sim[:5, :5])  # Menampilkan skor kesamaan untuk 5 obat pertama

"""**recommend_drugs(drug_name, cosine_sim=cosine_sim)**
Fungsi ini bertujuan untuk memberikan rekomendasi obat berdasarkan kemiripan (similarity) kontennya, menggunakan pendekatan Content-Based Filtering. Model ini menggunakan nilai cosine similarity antara vektor representasi obat-obat dalam dataset.
"""

def recommend_drugs(drug_name, cosine_sim, obat, k=5):
    """
    Memberikan rekomendasi obat berdasarkan kesamaan ulasan dan relevansi kondisi.

    Parameters:
    - drug_name: Nama obat yang dicari
    - cosine_sim: Matriks cosine similarity
    - obat: DataFrame berisi data obat
    - k: Jumlah rekomendasi yang diinginkan

    Returns:
    - recommended: DataFrame berisi rekomendasi obat
    """
    obat = obat.reset_index(drop=True)

    if drug_name not in obat['drugName'].values:
        print(f"Obat '{drug_name}' tidak ditemukan dalam dataset.")
        return None

    idx = obat[obat['drugName'] == drug_name].index[0]
    target_condition = obat.loc[idx, 'condition']

    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = [score for score in sim_scores if score[0] != idx]

    rekomendasi = []
    for i, sim in sim_scores:
        if i in obat.index and obat.loc[i, 'condition'] == target_condition:
            rekomendasi.append(i)
        if len(rekomendasi) == k:
            break

    if not rekomendasi:
        print(f"Tidak ditemukan obat dengan kondisi '{target_condition}' yang mirip.")
        return None

    recommended = obat.loc[rekomendasi, ['uniqueID', 'drugName', 'condition', 'rating']]
    print(f"\nRekomendasi obat mirip dengan '{drug_name}' untuk kondisi '{target_condition}':")
    print(recommended)

    return recommended

"""Kode dibawah ini digunakan untuk menyaring data dari DataFrame obat dengan tujuan menampilkan semua baris yang berisi nama obat **'Anafranil'**."""

obat[obat.drugName.eq('Anafranil'
)]

rekomendasi = recommend_drugs('Anafranil', cosine_sim, obat, k=5)

"""# **Precision@K**

precision mengukur seberapa banyak dari obat-obat yang direkomendasikan oleh sistem benar-benar relevan atau bermanfaat bagi pengguna. Nilai precision yang tinggi menunjukkan bahwa sebagian besar rekomendasi sistem memang sesuai dan berguna, sedangkan precision yang rendah mengindikasikan bahwa sistem memberikan banyak rekomendasi yang tidak relevan.
"""

def calculate_precision_at_k(recommended_df, target_condition, rating_threshold=7):
    """
    Menghitung Precision@K berdasarkan rekomendasi obat dan kondisi target.

    Parameters:
    - recommended_df: DataFrame hasil rekomendasi dari fungsi sebelumnya
    - target_condition: Kondisi medis yang menjadi acuan relevansi
    - rating_threshold: Rating minimum agar obat dianggap relevan

    Returns:
    - precision_at_k: nilai presisi
    """
    if recommended_df is None or recommended_df.empty:
        print("Data rekomendasi kosong.")
        return 0.0

    total = len(recommended_df)
    relevant = recommended_df[
        (recommended_df['condition'] == target_condition) &
        (recommended_df['rating'] >= rating_threshold)
    ].shape[0]

    precision = relevant / total if total > 0 else 0.0
    print(f"\nPrecision@{total}: {precision:.3f} ({relevant}/{total} obat relevan)")
    return precision

# Precision
target_condition = obat[obat['drugName'] == 'Anafranil'].iloc[0]['condition']
calculate_precision_at_k(rekomendasi, target_condition)

